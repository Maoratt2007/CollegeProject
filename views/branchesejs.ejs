<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <link rel="shortcut icon" type="x-icon" href="assets/home-pizza.png"><!--the icon of our web-->
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Branches</title>
  <!-- Include jQuery library -->
  <script src="jquery.js"></script>
</head>
<body>
<h1>Branches List</h1>
<div id="branchesList">
  <!-- Product list will be rendered here -->
</div>
<a href="/homepage" class="fas fa-reply custom-reply-icon"></a> 

<script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "YOUR_API_KEY",
    v: "weekly",
  });
</script>

<script>
  // Replace this URL with your actual API endpoint to fetch product data
  const apiEndpoint = 'http://localhost:3000/api/branch';

  // Function to fetch and render product data
  function fetchBranches() {
    $.ajax({
      url: apiEndpoint,
      method: 'GET',
      dataType: 'json',
      data:{
        is_show_branch:true
      },
      success: function (data) {
        // Product data received successfully
        renderBranches(data);
      },
      error: function (err) {
        // Error handling in case API call fails
        console.log(err)
        alert('Failed to fetch branch data.');
      }
    });
  }


  // Function to render the product data on the screen
  function renderBranches(branches) {
    const branchListContainer = $('#branchesList');

    // Loop through each product and create an HTML element to display it
    branches.forEach(function (branch) {
      const branchElement = `
                    <div class="branch">
                        
                      <div class ="branch-header">
                        <span class="material-symbols-outlined">
                          location_on
                        </span>
                        <h2>${branch.name}</h2>
                        <div class="more" onclick="open_branch('${branch._id}',this)">
                          <span class="material-symbols-outlined">
                            expand_more
                          </span>
                        </div>
                        </div>


                        <div class ="branch-slide">

                        <div class ="branch-details closed_branch" id="${branch._id}">
                          <div>
                            <p>Address: ${branch.address}</p>
                            <p>Phone Number:${branch.phoneNumber}</p>
                            <p>Activity Hours:${branch.activityTime}</p>
                          <div>
                            <div id="map">
                              
                            </div>
                        </div>
                      </div>
                    </div>
                `;
      branchListContainer.append(branchElement);
    });
  }

  // Fetch the product data when the page loads
  $(document).ready(function () {
        console.log('insert to function');
        fetchBranches();
  });



  function open_branch(id,element) {
    const branch_element = document.getElementById(id)

    if(branch_element.classList.contains("closed_branch")) {
      branch_element.classList.add('opened_branch')
      branch_element.classList.remove('closed_branch')
      element.classList.add('rotate180')
    } else {
      branch_element.classList.remove('opened_branch')
      branch_element.classList.add('closed_branch')
      element.classList.remove('rotate180')
    }
  }
</script>

<script>
  // Initialize and add the map
let map;

async function initMap() {
  // The location of Uluru
  const position = { lat: -25.344, lng: 131.031 };
  // Request needed libraries.
  //@ts-ignore
  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

  // The map, centered at Uluru
  map = new Map(document.getElementById("map"), {
    zoom: 4,
    center: position,
    mapId: "DEMO_MAP_ID",
  });

  // The marker, positioned at Uluru
  const marker = new AdvancedMarkerElement({
    map: map,
    position: position,
    title: "Uluru",
  });
}

initMap();
</script>
<style>

  .branch-slide {
    overflow: hidden;
    max-height: 400px;
  }

  .more {
    margin-left: auto;
    cursor: pointer;
    transition: .2s linear;
  }
  .branch {
    padding:8px;
    display:flex;
    flex-direction: column;
    row-gap: 8px;
    max-width:1000px;
  }
  .closed_branch {
    transition: .3s ease-in-out;
    transform:translateY(-500px);
    opacity:0;
  }
  .opened_branch {
    transition: .3s ease-in-out;
    transform:translateY(0px);
    opacity: 1;
  }
  .rotate180 {
    transform: rotateZ(180deg) translateY(4px);
  }

  .branch-details {
    border:1px solid lightgray;
    margin-block:8px;
    display:grid;
    padding:8px;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr;
  }

  .branch-details div:first-child {
    flex-direction: column;
    display: flex;
  }
  /* .branch-details p {
    
  } */
  
  .branch-header {
    background:#bd3333;
    color:white;
    padding:12px;
    display:flex;
    flex-direction: row;
    border:1px solid gray;
    align-items: center;
    column-gap: 12px;
  }
  /* .map {
      
  } */
  
</style>
</body>
</html>
