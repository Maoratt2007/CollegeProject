<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="ordermenue.css">
  <link rel="shortcut icon" type="x-icon" href="assets/home-pizza.png">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="ordermenue.css">
  <title>Order</title>
  <!-- Include jQuery library -->
  <script src="jquery.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"><!--the link that enables us to use icons -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script><!--call to bootstrap-->

  <style>
 /* Apply the specified font */
/* Reset some default styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family:Georgia, 'Times New Roman', Times, serif;
}

/* Set a background color for the body */
body {
    font-family:Georgia, 'Times New Roman', Times, serif;
    background-color: #f4f4f4;
}

/* Style the header */
header {
    background-color: #c41717;
    color: #fff;
    text-align: center;
    padding: 40px;
}
h1 {
    font-size: 2.5em;
    margin-bottom: 20px;
    margin-top: 20px;
    color: black;
    text-align: center;
  }
  .custom-reply-icon {
    font-size: 1.5em;
    color: #c41717;
    text-decoration: none;
    margin-left: 40px;
}
.backToHomePage{
  font-size: 1.5em;
    color: #c41717;
    text-decoration: none;
    margin-top: 20px;
    margin-left: 625px;

}

#orderForm {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid black;
  border-radius: 5px;
}

#orderForm label {
  display: block;
  margin-bottom: 5px;
}

#orderForm input[type="text"] {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  border: 1px solid black;
  border-radius: 3px;
}

/* Style the submit button */
#orderForm button[type="submit"] {
  display: inline-block;
  padding: 10px 20px;
  background-color: #c41717;
  color: white;
  text-decoration: none;
  border-radius: 5px;
  cursor: pointer;
  border: 2px solid black; 
  Text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); /* Add text shadow */
}

#orderForm button[type="submit"]:hover {
  background-color: black;
  border: 2px solid #c41717; 
}

/* #orderList {
  /* Define your order list styles here */
/* } */


/* .custom-reply-icon {
  /* Define your custom reply icon styles here */
/* } */ */ */

#canvas {
  position: fixed;
  top: 0;
  left: 0;
  pointer-events: none;
}



.recipetOrder {
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 20px;
  width: 300px;
  text-align: center;
  color: black;
  margin-left: 500px;

}

.backToHomePage {
  font-size: 1.5em;
  color: #c41717;
  text-decoration: none;
  margin-top: 20px;
  display: block; /* Make it a block-level element */
  width: fit-content; /* Set width to the natural width of the content */
  text-align: center; /* Center the text horizontally */

  
}




  </style>

</head>
<body>

  <header>
    <!-- Include your header content here -->
</header>

<h1>Order Form</h1>
<a href="/menu" class="fas fa-reply custom-reply-icon"></a> <!-- Add the "custom-reply-icon" class -->
<form id="orderForm">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" required><br>
  
  <label for="address">Address:</label>
  <input type="text" id="address" name="address" required><br>
  
  <label for="creditCard">Credit Card:</label>
  <input type="text" id="creditCard" name="creditCard" required pattern="[0-9]{16}" title="Please enter a 16-digit credit card number"><br>
  <button type="submit">Submit</button>
</form>

<div id="orderList"></div>
<div id="recipet"></div>
<canvas id="canvas"></canvas>


<!-- Filter button and category buttons -->


<script>




  // Replace this URL with your actual API endpoint to fetch product data
  const apiEndpoint = 'http://localhost:3000/api/order';
  const orderes=[];
  const orderForm = $('#orderForm');
  orderForm.show();


  orderForm.on('submit', function(event) {
  event.preventDefault(); // Prevent the default form submission
  
  // Call the AddOrder function
  AddOrder();
});



  function triggerConfeetti()
{
//-----------Var Inits--------------
canvas = document.getElementById("canvas");
ctx = canvas.getContext("2d");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
cx = ctx.canvas.width/2;
cy = ctx.canvas.height/2;

let confetti = [];
let confettiInitialized = false; // Track if confetti has been initialized
const confettiCount = 300;
const gravity = 0.5;
const terminalVelocity = 5;
const drag = 0.075;
const colors = [
  { front : 'red', back: 'darkred'},
  { front : 'green', back: 'darkgreen'},
  { front : 'blue', back: 'darkblue'},
  { front : 'yellow', back: 'darkyellow'},
  { front : 'orange', back: 'darkorange'},
  { front : 'pink', back: 'darkpink'},
  { front : 'purple', back: 'darkpurple'},
  { front : 'turquoise', back: 'darkturquoise'},
];

//-----------Functions--------------
resizeCanvas = () => {
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
	cx = ctx.canvas.width/2;
	cy = ctx.canvas.height/2;
}

randomRange = (min, max) => Math.random() * (max - min) + min

initConfetti = () => {
  for (let i = 0; i < confettiCount; i++) {
    confetti.push({
      color      : colors[Math.floor(randomRange(0, colors.length))],
      dimensions : {
        x: randomRange(10, 20),
        y: randomRange(10, 30),
      },
      position   : {
        x: randomRange(0, canvas.width),
        y: canvas.height - 1,
      },
      rotation   : randomRange(0, 2 * Math.PI),
      scale      : {
        x: 1,
        y: 1,
      },
      velocity   : {
        x: randomRange(-25, 25),
        y: randomRange(0, -50),
      },
    });
  }
}

//---------Render-----------
render = () =>   {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  confetti.forEach((confetto, index) => {
    let width = (confetto.dimensions.x * confetto.scale.x);
    let height = (confetto.dimensions.y * confetto.scale.y);
    
    // Move canvas to position and rotate
    ctx.translate(confetto.position.x, confetto.position.y);
    ctx.rotate(confetto.rotation);
    
    // Apply forces to velocity
    confetto.velocity.x -= confetto.velocity.x * drag;
    confetto.velocity.y = Math.min(confetto.velocity.y + gravity, terminalVelocity);
    confetto.velocity.x += Math.random() > 0.5 ? Math.random() : -Math.random();
    
    // Set position
    confetto.position.x += confetto.velocity.x;
    confetto.position.y += confetto.velocity.y;
    
    // Delete confetti when out of frame
    if (confetto.position.y >= canvas.height) confetti.splice(index, 1);

    // Loop confetto x position
    if (confetto.position.x > canvas.width) confetto.position.x = 0;
    if (confetto.position.x < 0) confetto.position.x = canvas.width;

    // Spin confetto by scaling y
    confetto.scale.y = Math.cos(confetto.position.y * 0.1);
    ctx.fillStyle = confetto.scale.y > 0 ? confetto.color.front : confetto.color.back;
     
    // Draw confetto
    ctx.fillRect(-width / 2, -height / 2, width, height);
    
    // Reset transform matrix
    ctx.setTransform(1, 0, 0, 1, 0, 0);
  });

  // Fire off another round of confetti if not initialized
  if (confetti.length <= 10 && !confettiInitialized) {
    confettiInitialized = true;
  }
  
  // Only continue the animation loop if confetti is present
  if (confetti.length > 0) {
    window.requestAnimationFrame(render);
  }

}

//---------Execution--------
initConfetti();
render();

//----------Resize----------
window.addEventListener('resize', function () {
  resizeCanvas();
});

//------------Click------------
window.addEventListener('click', function() {
  initConfetti();
});
}

  // Function to fetch and render product data
  function AddOrder() {
    const name = $('#name').val();
  const address = $('#address').val();
  const credit_card = $('#creditCard').val();

  const storedItems = JSON.parse(localStorage.getItem('items'));
  console.log(storedItems)
  const total_price = JSON.parse(localStorage.getItem('total_price'));
  console.log(total_price)
  const userId = localStorage.getItem('userId');



    const orderData = {
    name: name,
    price:total_price,
    address: address,
    credit_card:credit_card,
    items:storedItems,
    userId:userId

  };
  //אם אני רוצה הזמנות של אותו יוזר  אז לעשות API חדש  שיתן לי את כל ההזמנות לפי אורדר

    $.ajax({
    url: apiEndpoint, // Update the URL to your API endpoint
    method: 'POST',
    contentType: 'application/json',
    data: JSON.stringify(orderData),
    success: function (response) {
      localStorage.setItem('orderes', JSON.stringify(orderes));
      console.log(response._id);
      localStorage.setItem('orderId', JSON.stringify(response._id));
      triggerConfeetti();


    },
    error: function (error) {
      console.error('Error creating order:', error);
    },
  });


  const recipetContainer = $('#recipet');
  orderForm.hide();
  
  recipetContainer.empty(); // Clear existing products

  const recipetElement=` <div class="recipetOrder">
    congratulations, Order accepted!
      <h2> Order Name- ${orderData.name}</h2>
      <h2>Paid- ${orderData.price}$</h2>
      <a href="/homepage" class="backToHomePage"> Back to Home</a>
    </div>`;
    recipetContainer.append(recipetElement);

  }